#include "pw.h"
#include <fstream>
#include <iomanip>

using namespace std;

/** Load all the h bond interaction information between conformers
 * from the binary file "hb.dat".
 */
int pw::load_h()
{
    ifstream ifile("hb.dat", ios::in | ios::binary);
    int n_conf;

    ifile.read((char *) &n_conf, sizeof(int));
    hinter.resize(n_conf);
    for (size_t i=0; i<n_conf; i++) hinter[i].resize(n_conf);
    
	for (size_t i=0; i<n_conf; i++) {
		for (size_t j=0; j<n_conf; j++) {
			ifile.read((char *) &hinter[i][j], 1);
		}
	}
 
    return 0;
}

int pw::get_resinter()
{
    int n_res = Mstate::n_spe;
    resinter.resize(n_res);
    for (size_t i=0; i<n_res; i++) resinter[i].resize(n_res);

    printf("number of records stored: %d\n", (int) state.all_states.size());
    for (size_t i=0; i<state.all_states.size(); i++) {
        for (int i_res=0; i_res<n_res; i_res++) {
            for (int j_res=0; j_res<n_res; j_res++) {
				if (j_res == i_res) continue;
                resinter[i_res][j_res] += hinter[state.all_states[i].iconf[i_res]][state.all_states[i].iconf[j_res]] 
                                          * state.all_states[i].count;

            }
        }
    }
    

    return 0;
} 

int pw::output_matrix()
{
	const float THRESHOLD_TO_WRITE = 0.01;

    int n_res = Mstate::n_spe; 

    ofstream ofile("hb.txt", ios::out);
    for (size_t i=0; i<n_res; i++) {
        for (size_t j=0; j<n_res; j++) {
            if ((float) resinter[i][j]/state.allcount > THRESHOLD_TO_WRITE * -0.1) {
            	ofile << Mstate::head_spe[i] << '\t' << Mstate::head_spe[j] << '\t' << fixed << setprecision(3) << ((float) resinter[i][j]/state.allcount) << endl;;
            }
        }
    }
    ofile.close();

    return 0;
}
